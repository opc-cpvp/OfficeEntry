@implements IDisposable
@inject ISurveyInterop SurveyInterop
@inject IJSRuntime JSRuntime

@*<button class="btn btn-primary" @onclick="GetData">Click me!</button>*@

<div id="blazor-survey-wraper">
</div>

<p>@SurveyResult</p>

@code {
    [Parameter]
    public string Id { get; set; } = "surveyElement";

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string SurveyUrl { get; set; }

    [Parameter]
    public EventCallback<string> OnSurveyCompleted { get; set; }

    /// <remarks>
    /// 0. On survey.js.init
    /// 1. survey.js invokes <see cref="Survey.OnLoadData"/>
    /// 2. <see cref="Survey.OnLoadData"/> invokes the <see cref="Survey.OnLoadData"/> handler in the parent component.
    /// 3. The parent component invokes <see cref="Survey.SetData(string)"/>.
    /// 4. <see cref="Survey.SetData(string)"/> passes the data to SurveyJS using the survey.js.setData function.
    /// </remarks>
    [Parameter]
    public EventCallback<Survey> OnLoadData { get; set; }

    [Parameter]
    public string Data { get; set; }

    private string SurveyResult { get; set; }

    private DotNetObjectReference<Survey> _objectReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        _objectReference = DotNetObjectReference.Create(this);

        await JSRuntime.InvokeVoidAsync("interop.survey.register", _objectReference);
        await JSRuntime.InvokeVoidAsync("interop.survey.init", Id, @Class, SurveyUrl, Data);
    }

    public async Task GetData()
    {
        var surveyData = await JSRuntime.InvokeAsync<object>("interop.survey.data");
        await JSRuntime.InvokeVoidAsync("ShowAlert", surveyData.ToString());
    }

    [JSInvokable]
    public async Task SurveyCompleted(string results)
    {
        SurveyResult = results;
        StateHasChanged();

        await OnSurveyCompleted.InvokeAsync(results);
    }

    public async Task SetData(string data)
    {
        await JSRuntime.InvokeVoidAsync("interop.survey.setData", data);
    }

    [JSInvokable]
    public async Task LoadData()
    {
        await OnLoadData.InvokeAsync(this);
    }

    public void Dispose()
    {
        _objectReference?.Dispose();
    }
}