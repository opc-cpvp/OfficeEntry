@page "/access-requests/{id:guid}"
@page "/review-access-requests/{id:guid}"
@using OfficeEntry.Domain.Entities;
@inject HttpClient Http

<h1>Review</h1>

@if (accessRequest == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>@accessRequest.Employee.FullName</h2>
    <p>@accessRequest.Building.Name, @accessRequest.Floor.Name</p>
    <p>@accessRequest.StartTime.ToString("MMMM dd, yyyy") - @accessRequest.StartTime.ToString("h:mm tt") to @accessRequest.EndTime.ToString("h:mm tt")</p>
    <p><strong>Status:</strong> @accessRequest.Status.Value</p>
    <p><strong>Reason:</strong> @accessRequest.Reason.Value</p>
    <p><strong>Details:</strong> @accessRequest.Details</p>

    if (accessRequest.Visitors.Any())
    {
        <p><strong>Visitors:</strong></p>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Email</th>
                    <th scope="col">Telephone</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var visitor in accessRequest.Visitors)
                {
                    <tr>
                        <td>@visitor.FullName</td>
                        <td>@visitor.EmailAddress</td>
                        <td>@visitor.PhoneNumber</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    if (IsEmployee)
    {
        <button type="button" class="btn btn-danger" @onclick="CancelRequest" disabled="@IsCancelled">Cancel</button>
    }

    if (IsManager)
    {
        <button type="button" class="btn btn-danger" @onclick="DeclineRequest" disabled="@IsDeclined">Decline</button>
        <button type="button" class="btn btn-success" @onclick="ApproveRequest" disabled="@IsApproved">Approve</button>
    }
}

@code {
    [Parameter] public Guid Id { get; set; }

    // TODO: Check if the active user is also the employee
    public bool IsEmployee { get; set; } = true;

    // TODO: Check if the active user is also the manager
    public bool IsManager { get; set; } = true;

    public bool IsApproved { get { return accessRequest.Status.Key == (int)Domain.Entities.AccessRequest.ApprovalStatus.Approved; } }
    public bool IsCancelled { get { return accessRequest.Status.Key == (int)Domain.Entities.AccessRequest.ApprovalStatus.Cancelled; } }
    public bool IsDeclined { get { return accessRequest.Status.Key == (int)Domain.Entities.AccessRequest.ApprovalStatus.Declined; } }

    private Domain.Entities.AccessRequest accessRequest;

    protected override async Task OnInitializedAsync()
    {
        accessRequest = await Http.GetFromJsonAsync<Domain.Entities.AccessRequest>($"api/AccessRequests/{Id}");
    }

    private async Task ApproveRequest()
    {
        accessRequest.Status.Key = (int)Domain.Entities.AccessRequest.ApprovalStatus.Approved;
        await Http.PostAsJsonAsync("api/accessrequests/update", accessRequest);
        accessRequest.Status.Value = "Approved";
    }

    private async Task CancelRequest()
    {
        accessRequest.Status.Key = (int)Domain.Entities.AccessRequest.ApprovalStatus.Cancelled;
        await Http.PostAsJsonAsync("api/accessrequests/update", accessRequest);
        accessRequest.Status.Value = "Cancelled";
    }

    private async Task DeclineRequest()
    {
        accessRequest.Status.Key = (int)Domain.Entities.AccessRequest.ApprovalStatus.Declined;
        await Http.PostAsJsonAsync("api/accessrequests/update", accessRequest);
        accessRequest.Status.Value = "Declined";
    }
}