@inject IJSRuntime JSRuntime

@using OfficeEntry.Application.AccessRequests.Queries.GetSpotsAvailablePerHour
@using System.Globalization

<div id="blazor-spotsAvailablePerHours-wraper">
</div>

@code {
    [Parameter]
    public string Id { get; set; } = "chartElement";

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public CurrentCapacity[] Data { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var labels = Data
            .Where(x => x.Hour >= 7 && x.Hour <= 17)
            .Select(x => new object[]
            {
                CultureInfo.CurrentUICulture.TwoLetterISOLanguageName == "fr"
                ? x.Hour == 12 ? "Midi" : x.Hour + "h"
                : x.Hour == 12 ? "Noon" : x.Hour > 12 ? (x.Hour - 12) + "PM" : x.Hour + "AM"
            }).ToArray();

        var spotsReserved = Data
            .Where(x => x.Hour >= 7 && x.Hour <= 17)
            .Select(x => x.SpotsReserved)
            .ToArray();

        var spotsAvailable = Data
          .Where(x => x.Hour >= 7 && x.Hour <= 17)
          .Select(x => x.Capacity - x.SpotsReserved)
          .ToArray();

        var datasetsData = new object[] { spotsReserved, spotsAvailable };

        var title = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName == "fr"
            ? "Places disponibles par heure"
            : "Spots available per hour";

        var datasetLabels = new string[]
        {
            CultureInfo.CurrentUICulture.TwoLetterISOLanguageName == "fr"
                ? "Places réservés"
                : "Spots reserved",

            CultureInfo.CurrentUICulture.TwoLetterISOLanguageName == "fr"
                ? "Places disponibles"
                : "Spots available"
        };

        await JSRuntime.InvokeVoidAsync("interop.spotsAvailablePerHours.init", Id, title, labels, datasetLabels, datasetsData);      
    }
}
