@implements IDisposable
@inject ISurveyInterop SurveyInterop
@inject IJSRuntime JSRuntime
@using OfficeEntry.WebApp.Models
@using Newtonsoft.Json
@using System.Globalization
@using OfficeEntry.Domain.Enums
@using OfficeEntry.Application.AccessRequests.Queries.GetSpotsAvailablePerHour

<div id="blazor-survey-wraper">
    @if (_isErrorActive)
    {
        <Error OnDismissButtonClick="HideError"/>
    }
</div>


@code {
    [Parameter]
    public string Id { get; set; } = "surveyElement";

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string SurveyUrl { get; set; }

    [Parameter]
    public EventCallback<Survey> OnSurveyLoaded { get; set; }

    [Parameter]
    public EventCallback<string> OnSurveyCompleted { get; set; }

    [Parameter]
    public EventCallback<(string surveyData, string newCurrentPageNames)> OnPageChanged { get; set; }

    [Parameter]
    public EventCallback<(string surveyData, string newCurrentPageNames)> OnValueChanged { get; set; }

    [Parameter]
    public EventCallback<(string surveyData, string oldCurrentPageName, string newCurrentPageName)> OnCurrentPageChanging { get; set; }

    [Parameter]
    public string Data { get; set; }

    private DotNetObjectReference<Survey> _objectReference;

    private bool _isErrorActive;

    [Inject]
    public MediatR.IMediator Mediator { get; set; }

    private IJSObjectReference _module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        _module = await JSRuntime
            .InvokeAsync<IJSObjectReference>("import", "/js/survey.js");

        var locale = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName;
        locale = locale == Locale.French ? locale : Locale.English;

        _objectReference = DotNetObjectReference.Create(this);

        await _module.InvokeVoidAsync("register", _objectReference, locale);
        await _module.InvokeVoidAsync("init", Id, Class, SurveyUrl, Data);
        await JSRuntime.InvokeAsync<object>("initializeDatepicker", locale);
        await JSRuntime.InvokeAsync<object>("initializeSelect2", locale);
    }

    public async Task<string> GetData()
    {
        var surveyData = await _module.InvokeAsync<string>("data");
        return surveyData;
    }

    public async Task SetData(string data)
    {
        await _module.InvokeVoidAsync("setData", data);
    }

    public async Task SetValueAsync(string questionName, string value)
    {
        await _module.InvokeVoidAsync("setValue", questionName, value);
    }

    [JSInvokable]
    public async Task SurveyCompleted(string results)
    {
        await OnSurveyCompleted.InvokeAsync(results);
    }

    [JSInvokable]
    public async Task PageChanged(string surveyData, string newCurrentPageName)
    {
        await OnPageChanged.InvokeAsync((surveyData, newCurrentPageName));
    }

    [JSInvokable]
    public async Task CurrentPageChanging(string surveyData, string oldCurrentPageName, string newCurrentPageName)
    {
        await OnCurrentPageChanging.InvokeAsync((surveyData, oldCurrentPageName, newCurrentPageName));
    }

    [JSInvokable]
    public async Task ValueChanged(string surveyData, string options)
    {
        await OnValueChanged.InvokeAsync((surveyData, options));
    }

    [JSInvokable]
    public async Task<bool> HasAvailableCapacity(string surveyData)
    {
        var submission = JsonConvert.DeserializeObject<AccessRequestSubmission>(surveyData);
        var floorId = submission.floor;
        var date = submission.startDate;

        var results = (await Mediator.Send(new GetSpotsAvailablePerHourQuery { FloorId = floorId, SelectedDay = date })).ToArray();

        for (var i = submission.startTime; i < submission.endTime; i++)
        {
            var availableCapacity = results[i].Capacity - results[i].SpotsReserved - (1 + submission.visitors?.Length ?? 0);

            if (availableCapacity <= 0)
            {
                return false;
            }
        }

        return true;
    }

    [JSInvokable]

    public void ShowError()
    {
        _isErrorActive = true;
        StateHasChanged();
    }

    [JSInvokable]

    private void HideError()
    {
        _isErrorActive = false;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task SurveyLoaded()
    {
        await OnSurveyLoaded.InvokeAsync(this);
    }

    public void Dispose()
    {
        _objectReference?.Dispose();
    }
}